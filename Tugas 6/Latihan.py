# -*- coding: utf-8 -*-
"""Untitled26.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TSxTgZeTVzz08OOm9mLfdhJj9jWZHxjc
"""

# POLYMORPHISM
# Simple example using len function

print(len("Polymorphism"))
print(len([0,1,2,3]))

# USING CLASS

class Jerman():
  def ibukota(self):
    print("Berlin adalah ibukota negara Jerman")

class Jepang():
  def ibukota(self):
    print("Tokyo adalah ibukota negara Jepang")

negara1 = Jerman()
negara2 = Jepang()

for country in (negara1,negara2):
  country.ibukota()

# POLYMORPHISM dengan CLASS

class Kucing():
  def __init__(self, nama, umur):
    self.nama = nama
    self.umur = umur

  def bersuara(self):
    print("Meow")

class Anjing():
  def __init__(self, nama, umur):
    self.nama = nama
    self.umur = umur

  def bersuara(self):
    print("Guk...Guk...")

kucing1 = Kucing("Tom", 3)
anjing1 = Anjing("Spike", 4)

for hewan in (kucing1, anjing1):
  hewan.bersuara()

# POLYMORPHISM dengan INHERITANCE

class Burung():
  def intro(self):
    print("Di dunia ini ada beberapa tipe berbeda dari spesies burung")
  
  def terbang(self):
    print("Hampir semua burung dapat terbang, namun ada beberapa yang tidak dapat terbang")
  
class Elang(Burung):
  def terbang(self):
    print("Elang dapat terbang")

class BurungUnta(Burung):
  def terbang(self):
    print("Burung Unta tidak dapat terbang")

obj_burung = Burung()
obj_elang = Elang()
obj_burung_unta = BurungUnta()

obj_burung.intro()
obj_burung.terbang()

obj_elang.intro()
obj_elang.terbang()

obj_burung_unta.intro()
obj_burung_unta.terbang()

# IMPLEMENTASI KELAS ABSTRAK

from abc import ABC, abstractmethod
class Bentuk(ABC):
  @abstractmethod
  def luas(self):
    return self.__sisi * self.__sisi
  @abstractmethod
  def keliling(self):
    return 4 * self.__sisi

class Persegi(Bentuk):
  def __init__(self, sisi):
    self.__sisi = sisi
  def luas(self):
    return self.__sisi * self.__sisi
  def keliling(self):
    return 4 * self.__sisi

persegi = Persegi(6)
print(persegi.luas())
print(persegi.keliling())

# IMPLEMENTASI OVERLOADING

class Pegawai():
  jumlah = 0

  def __init__ (self, nama, gaji):
    self.nama = nama
    self.gaji = gaji
    Pegawai.jumlah += 1

  def tampilJumlah(self):
    print("Total Pegawai", Pegawai.jumlah)

  def tampilPegawai(self):
    print("Nama :", self.nama, ", Gaji :", self.gaji)

# Method Overloading
  def tunjangan(self, istri=None, anak=None):
    if anak != None and istri != None:
      total = anak+istri
      print("Tunjangan Anak + Istri =" ,total)
    else:
      total = istri
      print("Tunjangan Istri =", total)


# Memanggil Kelas
peg1 = Pegawai("Eren",2000)
peg2 = Pegawai("Luffy",6000)
peg1.tampilPegawai()
peg1.tunjangan(2500,2000) # Overloading
peg2.tampilPegawai()
peg2.tunjangan(2500)  # Overloading

print("Total Pegawai %d" % Pegawai.jumlah)
rataGaji=(peg1.gaji + peg2.gaji)/Pegawai.jumlah
print("Rata-rata Gaji : " + str(rataGaji))

# IMPLEMENTASI OVERRIDING

class Segiempat():
  def __init__(self, panjang, lebar):
    self.panjang=panjang
    self.lebar=lebar

  def hitungLuas (self):  # Method Overriding
    print("Luas Segiempat :",self.panjang * self.lebar, "m^2")

class Bujursangkar(Segiempat):
  def __init__(self,sisi):
    self.side=sisi
    Segiempat.__init__(self, sisi, sisi)

  def hitungLuas(self): # Method Overriding
    print("Luas Bujur Sangkar :",self.side * self.side, "m^2")

# Memanggil Kelas
b = Bujursangkar(4)
s = Segiempat(2,4)
b.hitungLuas()
s.hitungLuas()

# IMPLEMENTASI OVERLOADING


class Mahasiswa():
  def __init__(self,nama,nim):
    self.nama=nama
    self.nim=nim

  def tampilMhs(self):
    print("Nama :",self.nama,", NIM :",self.nim)

# Method Overloading
  def hitungSKS(self,jmsks=None,sks=None):
    if jmsks !=None and sks !=None:
      totalsks = jmsks+sks
      print("Total SKS :",totalsks)
    else:
      totalsks = jmsks
      print("Total SKS :",totalsks)
    if totalsks >= 100:
      print("Selamat anda dapat mengambil skripsi")
    else:
      print("Maaf anda belum dapat mengambil skripsi")

# Memanggil Kelas
mhs1 = Mahasiswa("Eren",123180015)
mhs1.tampilMhs()
mhs1.hitungSKS(80,34) # Overloading
print()
mhs2 = Mahasiswa("Luffy",123190007)
mhs2.tampilMhs()
mhs2.hitungSKS(83) # Overloading