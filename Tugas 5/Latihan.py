# -*- coding: utf-8 -*-
"""Pbo10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1exQyu0T5blp4zrgrWFmVyKhDdv-PQglC
"""

# Single Inheritance

#Parent Class
class Hewan :   
    def bersuara(self) :
        print("Kucing Bersuara")

# Anak class mewarisi parent class
class Kucing(Hewan) :
    def suara(self) :
        print("meong...meong...meong...")


#Objek
cat = Kucing()
cat.suara()
cat.bersuara()

#Multilevel Inheritance

#Parent Class
class Hewan :
    def bersuara(self) :
        print("Kucing Bersuara")

#Anak class mewarisi class hewan
class Kucing(Hewan) :
    def suara(self) :   
        print("meong...meong...meong...")

#Anak class Anakkucing mewarisi dari class hewan
class AnakKucing(Kucing) :
    def minum(self) :   
        print("Minum Susu")

#Objek
ak = AnakKucing()
ak.bersuara()
ak.suara()
ak.minum()

# HIERARCHICAL INHERITANCE

class Induk():
  def fungsiinduk(self):
    print('Fungsi pada parent class:')

class Anak1(Induk):
  def fungsianak1(self):
    print('Fungsi pada anak 1.')

class Anak2(Induk):
  def fungsianak2(self):
    print('Fungsi pada anak 2.')

a1 = Anak1()
a2 = Anak2()

a1.fungsiinduk()
a1.fungsianak1()

a2.fungsiinduk()
a2.fungsianak2()

# MULTIPLE INHERITANCE

#Parent 1
class Perhitungan1():
  def penjumlahan(self,a,b):
    return a+b

#Parent 2
class Perhitungan2():
  def perkalian(self,a,b):
    return a*b

#Child
class Hitung(Perhitungan1,Perhitungan2):
  def pembagian(self,a,b):
    return a/b

h = Hitung()
print(h.penjumlahan(20,30))
print(h.perkalian(5,4))
print(h.pembagian(6,12))

#Class Computer

class ComputerPart:
    def __init__(self, pabrikan, nama, jenis, harga):
        self.pabrikan = pabrikan
        self.nama = nama 
        self.jenis = jenis
        self.harga = harga

class Processor(ComputerPart) :
    def __init__(self, pabrikan, nama, harga, jumlah_core, speed):
        super().__init__(pabrikan, nama, 'processor', harga)
        self.jumlah_core = jumlah_core
        self.speed = speed

class RandomAccessMemory(ComputerPart):
    def __init__(self, pabrikan, nama, harga, kapasitas):
        super().__init__(pabrikan, nama, 'SATA', harga)
        self.kapasitas = kapasitas 
    
class HardDiskSATA(ComputerPart):
    def __init__(self, pabrikan, nama, harga, kapasitas, rpm):
        super().__init__(pabrikan, nama, 'SATA', harga)
        self.kapasitas = kapasitas
        self.rpm = rpm  

p = Processor('Intel', 'Core i7 7740X', 4350000, 4, '4.3GHz')
m = RandomAccessMemory('V-Gen', 'DDR4 SODimm PC19200/2400MHz', 328000, '4GB')
hdd = HardDiskSATA('Seagate', 'HDD 2.5 inch', 295000, '500GB', 7200)

parts = [p, m, hdd]
for part in parts:
    print('{} {} produksi {}'.format(part.jenis, part.nama, part.pabrikan))

#Single Inheritance

class Mahasiswa():
  def __init__(self, nama, nim):
    self.nama = nama
    self.nim = nim
  
  def detailMhs(self):
    return self.nim, self.nama

  def cekMhs(self):
    if self.nim < 150000:
      return "Mahasiswa Aktif"
    else:
      return "Mahasiswa tidak terdaftar"

class Siswa(Mahasiswa):
  def End(self):
    print("Mahasiswa belum melakukan daftar ulang")

mahasiswa1 = Mahasiswa("Mahasiswa 1", 135103)
print(mahasiswa1.detailMhs(),mahasiswa1.cekMhs())
mahasiswa2 = Siswa("Mahasiswa 2", 150530)
print(mahasiswa2.detailMhs(),mahasiswa2.cekMhs())
mahasiswa2.End()

#Multilevel Inheritance

class Mahasiswa() :
    def __init__(self, nama, nim) :
        self.nama = nama
        self.nim = nim

class Siswa1(Mahasiswa) :
    def __init__(self, nama, nim):
        super().__init__(nama, nim)
        
class Siswa2(Siswa1) :
    def __init__(self, nama, nim):
        self.nama = nama
        self.nim = nim 

mhs1 = Mahasiswa("Mikasa", 135105)
mhs2 = Siswa1("Nezuko", 135117)
mhs3 = Siswa2("Hancock", 134079)

print(mhs1.nama, mhs1.nim)
print(mhs2.nim)  
print(mhs3.nama)

#Hierarchical Inheritance

class Mahasiswa():
  def __init__(self,nama,nim):
    self.nama = nama
    self.nim = nim

class Siswa1(Mahasiswa):
  def __init__(self,nama,nim):
    self.nama = nama
    self.nim = nim
  def detSiswa1(self):
    print(self.nama,'alamat: wall rose')

class Siswa2(Mahasiswa):
  def __init__(self,nama,nim):
    self.nama = nama
    self.nim = nim
  def detSiswa2(self):
    print(self.nama,'jurusan: informatika')

mhs1 = Siswa1('Mikasa',135105)
mhs2 = Siswa2('Nezuko',135117)


print(mhs1.nim)
mhs1.detSiswa1()
print(mhs2.nim)
mhs2.detSiswa2()

#Multiple Inheritance

class Mahasiswa1() :
    def __init__(self, nama, nim ) :
        self.nama = nama
        self.nim = nim
   
class Mahasiswa2() :
    def __init__(self, alamat, jurusan) :
        self.alamat = alamat
        self.jurusan = jurusan
   
class Siswa(Mahasiswa1, Mahasiswa2) :
    def __init__(self, nama, nim, alamat, jurusan) :
        Mahasiswa1.__init__(self, nama, nim)
        Mahasiswa2.__init__(self, alamat, jurusan)

s = Siswa("Mikasa", 135105, "Wall Rose", "Informatika") 
print('nim:',s.nim,'nama:',s.nama,'alamat:',s.alamat,'jurusan:',s.jurusan)